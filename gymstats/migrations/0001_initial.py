# Generated by Django 4.1.7 on 2023-03-29 14:05

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Climber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Describable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("description", models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name="Gym",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location", models.CharField(max_length=100)),
                ("brand", models.CharField(max_length=100)),
                (
                    "gym_type",
                    models.CharField(
                        choices=[("Boulder", "Boulder"), ("Lead", "Lead")],
                        default="Boulder",
                        max_length=10,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("grade", models.CharField(max_length=10)),
                ("name", models.CharField(max_length=200)),
                ("date_added", models.DateField(default=datetime.date.today)),
                ("picture", models.ImageField(upload_to="problems")),
                (
                    "gym",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="gymstats.gym"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("arrival_time", models.DateTimeField()),
                ("duration", models.IntegerField()),
                (
                    "sleep",
                    models.FloatField(verbose_name="sleeping hours the night before"),
                ),
                (
                    "alcohol",
                    models.FloatField(
                        verbose_name="alcohol consumption the day before"
                    ),
                ),
                ("notes", models.CharField(max_length=300)),
                (
                    "overall_grade",
                    models.IntegerField(
                        choices=[
                            (0, "Execrable"),
                            (1, "Very Bad"),
                            (2, "Bad"),
                            (3, "Somewhat Bad"),
                            (4, "Average"),
                            (5, "Somewhat Good"),
                            (6, "Good"),
                            (7, "Very Good"),
                            (8, "Great"),
                            (9, "Fantastic"),
                        ]
                    ),
                ),
                (
                    "strength",
                    models.IntegerField(
                        choices=[
                            (0, "Execrable"),
                            (1, "Very Bad"),
                            (2, "Bad"),
                            (3, "Somewhat Bad"),
                            (4, "Average"),
                            (5, "Somewhat Good"),
                            (6, "Good"),
                            (7, "Very Good"),
                            (8, "Great"),
                            (9, "Fantastic"),
                        ]
                    ),
                ),
                (
                    "motivation",
                    models.IntegerField(
                        choices=[
                            (0, "Execrable"),
                            (1, "Very Bad"),
                            (2, "Bad"),
                            (3, "Somewhat Bad"),
                            (4, "Average"),
                            (5, "Somewhat Good"),
                            (6, "Good"),
                            (7, "Very Good"),
                            (8, "Great"),
                            (9, "Fantastic"),
                        ]
                    ),
                ),
                (
                    "fear",
                    models.IntegerField(
                        choices=[
                            (0, "Execrable"),
                            (1, "Very Bad"),
                            (2, "Bad"),
                            (3, "Somewhat Bad"),
                            (4, "Average"),
                            (5, "Somewhat Good"),
                            (6, "Good"),
                            (7, "Very Good"),
                            (8, "Great"),
                            (9, "Fantastic"),
                        ]
                    ),
                ),
                ("climbers", models.ManyToManyField(to="gymstats.climber")),
                (
                    "gym",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="gymstats.gym"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Shoes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("brand", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=100)),
                ("size", models.FloatField()),
                ("purchase_date", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Try",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attempts", models.IntegerField(default=1)),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gymstats.problem",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gymstats.session",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Failure",
            fields=[
                (
                    "try_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.try",
                    ),
                ),
            ],
            bases=("gymstats.try",),
        ),
        migrations.CreateModel(
            name="Footwork",
            fields=[
                (
                    "describable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.describable",
                    ),
                ),
            ],
            bases=("gymstats.describable",),
        ),
        migrations.CreateModel(
            name="HandHold",
            fields=[
                (
                    "describable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.describable",
                    ),
                ),
            ],
            bases=("gymstats.describable",),
        ),
        migrations.CreateModel(
            name="ProblemMethod",
            fields=[
                (
                    "describable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.describable",
                    ),
                ),
            ],
            bases=("gymstats.describable",),
        ),
        migrations.CreateModel(
            name="ProblemType",
            fields=[
                (
                    "describable_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.describable",
                    ),
                ),
            ],
            bases=("gymstats.describable",),
        ),
        migrations.CreateModel(
            name="Success",
            fields=[
                (
                    "try_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="gymstats.try",
                    ),
                ),
            ],
            bases=("gymstats.try",),
        ),
        migrations.CreateModel(
            name="ShoesFixing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fixing_date", models.DateField()),
                (
                    "shoes",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gymstats.shoes"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="session",
            name="shoes",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="gymstats.shoes"
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.CharField(max_length=120)),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gymstats.problem",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="gymstats.climber",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="problem",
            name="footwork",
            field=models.ManyToManyField(to="gymstats.footwork"),
        ),
        migrations.AddField(
            model_name="problem",
            name="hand_holds",
            field=models.ManyToManyField(to="gymstats.handhold"),
        ),
        migrations.AddField(
            model_name="problem",
            name="problem_method",
            field=models.ManyToManyField(to="gymstats.problemmethod"),
        ),
        migrations.AddField(
            model_name="problem",
            name="problem_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="gymstats.problemtype"
            ),
        ),
    ]
